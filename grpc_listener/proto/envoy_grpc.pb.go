// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: envoy.proto

package unified_observability

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ALSServiceClient is the client API for ALSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ALSServiceClient interface {
	StreamMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (ALSService_StreamMetricClient, error)
}

type aLSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewALSServiceClient(cc grpc.ClientConnInterface) ALSServiceClient {
	return &aLSServiceClient{cc}
}

func (c *aLSServiceClient) StreamMetric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (ALSService_StreamMetricClient, error) {
	stream, err := c.cc.NewStream(ctx, &ALSService_ServiceDesc.Streams[0], "/envoy.ALSService/StreamMetric", opts...)
	if err != nil {
		return nil, err
	}
	x := &aLSServiceStreamMetricClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ALSService_StreamMetricClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type aLSServiceStreamMetricClient struct {
	grpc.ClientStream
}

func (x *aLSServiceStreamMetricClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ALSServiceServer is the server API for ALSService service.
// All implementations must embed UnimplementedALSServiceServer
// for forward compatibility
type ALSServiceServer interface {
	StreamMetric(*MetricRequest, ALSService_StreamMetricServer) error
	mustEmbedUnimplementedALSServiceServer()
}

// UnimplementedALSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedALSServiceServer struct {
}

func (UnimplementedALSServiceServer) StreamMetric(*MetricRequest, ALSService_StreamMetricServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMetric not implemented")
}
func (UnimplementedALSServiceServer) mustEmbedUnimplementedALSServiceServer() {}

// UnsafeALSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ALSServiceServer will
// result in compilation errors.
type UnsafeALSServiceServer interface {
	mustEmbedUnimplementedALSServiceServer()
}

func RegisterALSServiceServer(s grpc.ServiceRegistrar, srv ALSServiceServer) {
	s.RegisterService(&ALSService_ServiceDesc, srv)
}

func _ALSService_StreamMetric_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ALSServiceServer).StreamMetric(m, &aLSServiceStreamMetricServer{stream})
}

type ALSService_StreamMetricServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type aLSServiceStreamMetricServer struct {
	grpc.ServerStream
}

func (x *aLSServiceStreamMetricServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

// ALSService_ServiceDesc is the grpc.ServiceDesc for ALSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ALSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.ALSService",
	HandlerType: (*ALSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMetric",
			Handler:       _ALSService_StreamMetric_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "envoy.proto",
}
